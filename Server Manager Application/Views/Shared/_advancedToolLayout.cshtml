@using Server_Manager_Application.Models.Nativization
@using Server_Manager_Application.Models.Static

@{
    string? infoMessage = TempData["Info"] as string;
    string? errorMessage = TempData["Error"] as string;
}

<!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>@ViewData["Title"] - @ViewBag.AppName</title>

        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
        <link rel="stylesheet" href="~/css/spacelab_bootstrap.css" asp-append-version="true" />
    </head>
    <body>
        <header>
            <nav class="navbar navbar-expand-lg bg-light" data-bs-theme="light">
                <div class="container-fluid">
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor03" aria-controls="navbarColor03" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarColor03">
                        <div>
                            <ul class="navbar-nav me-auto">
                                <li class="nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false" style="font-weight:500; font-size:larger;">@LocalUserInfo.username</a>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" id="user_about_button">@CommonWords.profile</a>
                                        <div class="dropdown-divider"></div>
                                        <a class="dropdown-item" asp-area="" asp-controller="User" asp-action="Logout">@CommonWords.logout</a>
                                    </div>
                                </li>
                            </ul>
                        </div>
                        <ul class="navbar-nav me-auto">
                            <li class="nav-item">
                                <a class="nav-link" id="app_home_button" asp-area="" asp-controller="Home" asp-action="Index">@CommonWords.home</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="app_about_button">@CommonWords.about</a>
                            </li>
                        </ul>
                        <form class="d-flex" id="searchForm">
                            <input class="form-control me-sm-2" type="search" placeholder=@CommonWords.search id="searchInput">
                            <button class="btn btn-secondary my-2 my-sm-0" type="submit">@CommonWords.search</button>
                        </form>
                    </div>
                </div>
            </nav>
        </header>
        <div>
            <div id="messageContainer"></div>
            @RenderBody()
        </div>
        <footer class="border-top footer text-muted" style="position: fixed; bottom: 0; width: 100%">
            <nav class="navbar navbar-expand-lg bg-primary" data-bs-theme="dark" >
                <div class="container-fluid">
                    <a class="navbar-brand" >@LocalUserInfo.domain</a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                </div>
            </nav>
        </footer>

        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
        <script src="~/js/site.js" asp-append-version="true"></script>

        <script async>
            const paths = document.getElementById("paths");
            const errorMessage = `@Html.Raw(errorMessage)`;
            const infoMessage = `@Html.Raw(infoMessage)`;            


            async function spawnAboutElement()
            {
                document.getElementById("messageContainer").innerHTML += `@await Html.PartialAsync("Widgets/Cards/_CardFloatingInfo", 
                    new Server_Manager_Application.Models.Messaging.InfoMessage { 
                        id = 10, 
                        title = @ViewBag.AppName, 
                        description = "", 
                        message = "@Copyright 2025 / 2025" 
                    }
                )`;
            }

            async function spawnAlertBox(message, asClass = "alert-danger", initMsg = "@CommonWords.error.ToUpper()", replace = false)
            {
                const htmlElement = `@await Html.PartialAsync("Widgets/Messaging/_AlertBox",
                    new Server_Manager_Application.Models.Messaging.AlertMessage { 
                        id = 349, 
                        title = "initMsg" + ":", 
                        description = "err", 
                        message = "" ,
                        classLike = "asClass"
                    }
                )`.replace("err", message).replace("asClass", asClass).replace("initMsg", initMsg);

                if (replace){
                    document.getElementById("messageContainer").innerHTML = htmlElement
                }
                else{
                    document.getElementById("messageContainer").innerHTML += htmlElement
                }

                const messageContainer = document.getElementById("widget_349");
                document.getElementById("btn_349").addEventListener('click', (event) => {handleCloseMessage(messageContainer)});

                await fadeIn(messageContainer, 500);
            }

            async function deleteFile(event, path) {
                const signal = AbortSignal.timeout(7000);

                try {
                    const response = await fetch(path, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        signal: signal
                    });

                    const result = await response.json();

                    if (result.state) 
                    {
                        await spawnAlertBox(result.response);
                        return;
                    }

                    window.location.reload();
                
                } catch (err) {
                    await spawnAlertBox(err.message);
                }
            }

            if (infoMessage !== "")
            {
                spawnAlertBox(infoMessage, "alert-success", "OK");
            }

            if (errorMessage !== "")
            {
                spawnAlertBox(errorMessage);
            }
        
        </script>

        @await RenderSectionAsync("Scripts", required: false)
    </body>
</html>